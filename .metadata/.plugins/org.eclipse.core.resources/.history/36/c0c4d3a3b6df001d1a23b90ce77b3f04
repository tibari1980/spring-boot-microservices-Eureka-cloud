package com.arcesi.ProductService.services.impl;

import java.time.Instant;
import java.util.Set;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.arcesi.ProductService.dtos.CategoryDTO;
import com.arcesi.ProductService.dtos.ProductDTO;
import com.arcesi.ProductService.entities.ProductEntity;
import com.arcesi.ProductService.enums.ErrorsCodeEnumeration;
import com.arcesi.ProductService.exceptions.InvalidEntityException;
import com.arcesi.ProductService.repositories.CategoryRepository;
import com.arcesi.ProductService.repositories.ProductRepository;
import com.arcesi.ProductService.services.CategoryService;
import com.arcesi.ProductService.validators.ObjectValidators;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@Transactional
public class CategoryServiceImpl implements CategoryService {

	@Autowired
	private CategoryRepository categoryRepository;
	
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private ObjectValidators validator;

	@Autowired
	private ProductRepository productRepository;
	@Override
	public CategoryDTO saveCategory(CategoryDTO cateDto) {
		return null;
	}

	@Override
	public ProductDTO createProduct(ProductDTO productDTO, Long categoryId) {
		

		log.info("Inside methode saveProduct of CategoryServiceImp  productDTO : {}  : code category : {}", productDTO, categoryId);
		productDTO.setCreatedAt(Instant.now());
		Set<String> violations = validator.validate(productDTO);
		if (!violations.isEmpty()) {
			log.error("There are errors while saving product try again ! ", violations);
			throw new InvalidEntityException("There are arrors while saving  product" ,ErrorsCodeEnumeration.PRODUCT_NOT_VALIDE, violations);
		}
		productDTO.setUidProduct(UUID.randomUUID().toString());
		ProductEntity entity = modelMapper.map(productDTO, ProductEntity.class);
		ProductEntity bean = productRepository.save(entity);
		log.info("Product created successfully !!",bean.toString());
		return modelMapper.map(bean, ProductDTO.class);
		
		return null;
	}
}
